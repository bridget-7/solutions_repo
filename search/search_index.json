{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Projectile Motion: A Comprehensive Analysis 1. Theoretical Foundation Governing Equations of Motion Projectile motion can be analyzed using the equations of motion derived from Newton's laws. We consider a projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) from the horizontal. The motion can be decomposed into horizontal and vertical components. Horizontal Motion : [ x(t) = v_{0x} t = v_0 \\cos(\\theta) t ] Vertical Motion : [ y(t) = v_{0y} t - \\frac{1}{2} g t^2 = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 ] where \\( g \\) is the acceleration due to gravity. Family of Solutions The equations above describe a family of solutions based on the initial conditions \\( v_0 \\) and \\( \\theta \\) . By varying these parameters, we can observe different trajectories. The time of flight \\( T \\) until the projectile returns to the same vertical level can be derived from the vertical motion equation: Setting \\( y(T) = 0 \\) : [ 0 = v_0 \\sin(\\theta) T - \\frac{1}{2} g T^2 ] This gives: [ T = \\frac{2 v_0 \\sin(\\theta)}{g} ] The horizontal range \\( R \\) can then be calculated as: [ R = x(T) = v_0 \\cos(\\theta) T = \\frac{v_0^2 \\sin(2\\theta)}{g} ] 2. Analysis of the Range Dependence on Angle of Projection The range \\( R \\) is maximized when \\( \\sin(2\\theta) \\) is maximized, which occurs at \\( \\theta = 45^\\circ \\) . Thus, the relationship between the angle of projection and the range is given by: [ R(\\theta) = \\frac{v_0^2 \\sin(2\\theta)}{g} ] Influence of Other Parameters Initial Velocity \\( v_0 \\) : The range increases with the square of the initial velocity. Doubling the initial velocity quadruples the range. Gravitational Acceleration \\( g \\) : The range is inversely proportional to \\( g \\) . A lower gravitational acceleration (e.g., on the Moon) results in a longer range. 3. Practical Applications Real-World Situations Uneven Terrain : The equations can be adapted to account for different launch and landing heights, requiring adjustments to the vertical motion equation. Air Resistance : Incorporating drag introduces a non-linear differential equation, complicating the analysis. The drag force can be modeled as: [ F_d = -\\frac{1}{2} C_d \\rho A v^2 ] where \\( C_d \\) is the drag coefficient, \\( \\rho \\) is the air density, \\( A \\) is the cross-sectional area, and \\( v \\) is the velocity. 4. Implementation Python Simulation Below is a Python script that simulates projectile motion and visualizes the range as a function of the angle of projection. ( alt text ) Graphical Representation The graph generated by the above code will illustrate how the range varies with the angle of projection, highlighting the optimal angle for maximum range. Limitations and Suggestions The idealized model assumes no air resistance and a flat surface. In reality, factors such as wind, drag, and uneven terrain can significantly affect projectile motion. Future work could involve: Incorporating drag into the simulation for more realistic trajectories. Exploring the effects of varying launch heights and angles on the range. Simulating projectiles in different gravitational fields, such as on other planets. This comprehensive analysis of projectile motion not only elucidates fundamental physics principles but also demonstrates the model's versatility across various applications. ```","title":"Projectile Motion: A Comprehensive Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#projectile-motion-a-comprehensive-analysis","text":"","title":"Projectile Motion: A Comprehensive Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#governing-equations-of-motion","text":"Projectile motion can be analyzed using the equations of motion derived from Newton's laws. We consider a projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) from the horizontal. The motion can be decomposed into horizontal and vertical components. Horizontal Motion : [ x(t) = v_{0x} t = v_0 \\cos(\\theta) t ] Vertical Motion : [ y(t) = v_{0y} t - \\frac{1}{2} g t^2 = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 ] where \\( g \\) is the acceleration due to gravity.","title":"Governing Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#family-of-solutions","text":"The equations above describe a family of solutions based on the initial conditions \\( v_0 \\) and \\( \\theta \\) . By varying these parameters, we can observe different trajectories. The time of flight \\( T \\) until the projectile returns to the same vertical level can be derived from the vertical motion equation: Setting \\( y(T) = 0 \\) : [ 0 = v_0 \\sin(\\theta) T - \\frac{1}{2} g T^2 ] This gives: [ T = \\frac{2 v_0 \\sin(\\theta)}{g} ] The horizontal range \\( R \\) can then be calculated as: [ R = x(T) = v_0 \\cos(\\theta) T = \\frac{v_0^2 \\sin(2\\theta)}{g} ]","title":"Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#dependence-on-angle-of-projection","text":"The range \\( R \\) is maximized when \\( \\sin(2\\theta) \\) is maximized, which occurs at \\( \\theta = 45^\\circ \\) . Thus, the relationship between the angle of projection and the range is given by: [ R(\\theta) = \\frac{v_0^2 \\sin(2\\theta)}{g} ]","title":"Dependence on Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#influence-of-other-parameters","text":"Initial Velocity \\( v_0 \\) : The range increases with the square of the initial velocity. Doubling the initial velocity quadruples the range. Gravitational Acceleration \\( g \\) : The range is inversely proportional to \\( g \\) . A lower gravitational acceleration (e.g., on the Moon) results in a longer range.","title":"Influence of Other Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#real-world-situations","text":"Uneven Terrain : The equations can be adapted to account for different launch and landing heights, requiring adjustments to the vertical motion equation. Air Resistance : Incorporating drag introduces a non-linear differential equation, complicating the analysis. The drag force can be modeled as: [ F_d = -\\frac{1}{2} C_d \\rho A v^2 ] where \\( C_d \\) is the drag coefficient, \\( \\rho \\) is the air density, \\( A \\) is the cross-sectional area, and \\( v \\) is the velocity.","title":"Real-World Situations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#python-simulation","text":"Below is a Python script that simulates projectile motion and visualizes the range as a function of the angle of projection. ( alt text )","title":"Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graphical-representation","text":"The graph generated by the above code will illustrate how the range varies with the angle of projection, highlighting the optimal angle for maximum range.","title":"Graphical Representation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations-and-suggestions","text":"The idealized model assumes no air resistance and a flat surface. In reality, factors such as wind, drag, and uneven terrain can significantly affect projectile motion. Future work could involve: Incorporating drag into the simulation for more realistic trajectories. Exploring the effects of varying launch heights and angles on the range. Simulating projectiles in different gravitational fields, such as on other planets. This comprehensive analysis of projectile motion not only elucidates fundamental physics principles but also demonstrates the model's versatility across various applications. ```","title":"Limitations and Suggestions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Forced Damped Pendulum: A Comprehensive Analysis 1. Theoretical Foundation Governing Differential Equation The motion of a forced damped pendulum can be described by the following second-order differential equation: \\[ \\frac{d^2\\theta}{dt^2} + 2\\beta \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega t) \\] where: - \\( \\theta \\) is the angular displacement, - \\( \\beta \\) is the damping coefficient, - \\( g \\) is the acceleration due to gravity, - \\( L \\) is the length of the pendulum, - \\( A \\) is the amplitude of the external driving force, - \\( \\omega \\) is the angular frequency of the driving force. Approximate Solutions for Small-Angle Oscillations For small angles, we can use the approximation \\( \\sin(\\theta) \\approx \\theta \\) . This simplifies the equation to: \\[ \\frac{d^2\\theta}{dt^2} + 2\\beta \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega t) \\] This is a linear second-order ordinary differential equation. The general solution can be expressed as the sum of the homogeneous solution and a particular solution: Homogeneous Solution : The homogeneous part of the equation is given by: $$ \\frac{d^2\\theta_h}{dt^2} + 2\\beta \\frac{d\\theta_h}{dt} + \\frac{g}{L} \\theta_h = 0 $$ The characteristic equation is: $$ r^2 + 2\\beta r + \\frac{g}{L} = 0 $$ Solving this gives: $$ r = -\\beta \\pm \\sqrt{\\beta^2 - \\frac{g}{L}} $$ Depending on the discriminant, the solutions can be overdamped, critically damped, or underdamped. Particular Solution : For the particular solution, we can assume a solution of the form: $$ \\theta_p(t) = C \\cos(\\omega t - \\phi) $$ Substituting this into the differential equation allows us to solve for \\( C \\) and \\( \\phi \\) . Resonance Conditions Resonance occurs when the driving frequency \\( \\omega \\) matches the natural frequency of the system, given by: $$ \\omega_0 = \\sqrt{\\frac{g}{L}} $$ At resonance, the amplitude of oscillation can become significantly larger, leading to increased energy in the system. This phenomenon is crucial in applications such as energy harvesting and mechanical resonance. 2. Analysis of Dynamics Influence of Parameters Damping Coefficient ( \\( \\beta \\) ) : Increasing \\( \\beta \\) leads to a decrease in oscillation amplitude and can transition the system from oscillatory to non-oscillatory behavior. Driving Amplitude ( \\( A \\) ) : Higher driving amplitudes can lead to larger oscillation amplitudes, especially near resonance. Driving Frequency ( \\( \\omega \\) ) : The system's response varies significantly with \\( \\omega \\) . At frequencies far from resonance, the system exhibits small oscillations, while at resonance, large oscillations can occur. Transition to Chaos As parameters are varied, particularly the driving frequency and amplitude, the system can transition from regular oscillations to chaotic behavior. This transition can be analyzed using phase diagrams and Poincar\u00e9 sections, which illustrate the system's state over time. 3. Practical Applications The forced damped pendulum model has several real-world applications, including: Energy Harvesting Devices : Systems that convert mechanical energy from oscillations into electrical energy. Suspension Bridges : Understanding how external forces (like wind) affect the oscillations of the bridge. Oscillating Circuits : Analogous behavior in electrical circuits, such as driven RLC circuits, where resonance plays a critical role. 4. Implementation Python Simulation Below is a Python script that simulates the motion of a forced damped pendulum and visualizes its behavior under various conditions. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp def forced_damped_pendulum(t, y, beta, g, L, A, omega): theta, omega = y dydt = [omega, -2*beta*omega - (g/L) * np.sin(theta) + A * np.cos(omega * t)] return dydt # Parameters beta = 0.1 # Damping coefficient g = 9.81 # Acceleration due to gravity (m/s^2) L = 1.0 # Length of the pendulum (m) A = 1.0 # Amplitude of the driving force omega = 1.5 # Driving frequency (rad/s) # Initial conditions theta0 = 0.1 # Initial angle (radians) omega0 = 0.0 # Initial angular velocity (rad/s) y0 = [theta0, omega0] # Time span for the simulation t_span = (0, 50) # Time from 0 to 50 seconds t_eval = np.linspace(t_span[0], t_span[1], 1000) # Solve the differential equation solution = solve_ivp(forced_damped_pendulum, t_span, y0, args=(beta, g, L, A, omega), t_eval=t_eval) # Plotting the results plt.figure(figsize=(12, 6)) plt.plot(solution.t, solution.y[0], label='Angular Displacement (\u03b8)') plt.title('Forced Damped Pendulum Motion') plt.xlabel('Time (s)') plt.ylabel('Angular Displacement (radians)') plt.grid() plt.legend() plt.show() Graphical Representations The above code will generate a plot of the angular displacement of the pendulum over time. By varying the parameters \\( \\beta \\) , \\( A \\) , and \\( \\omega \\) , one can observe different behaviors, including resonance and chaotic motion. Phase Diagrams and Poincar\u00e9 Sections To analyze transitions to chaos, one can create phase diagrams and Poincar\u00e9 sections. These visualizations help illustrate the system's dynamics and the nature of its oscillations. Limitations and Extensions The model assumes small-angle approximations and linear damping. In reality, factors such as large angles, nonlinear damping, and non-periodic driving forces can significantly affect the system's behavior. Future work could involve: Introducing nonlinear damping to explore more complex dynamics. Investigating the effects of non-periodic driving forces. Analyzing the system's behavior under varying initial conditions and external perturbations. This comprehensive analysis of the forced damped pendulum not only elucidates fundamental physics principles but also demonstrates the model's versatility across various applications in engineering and natural systems. ```","title":"Forced Damped Pendulum: A Comprehensive Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum-a-comprehensive-analysis","text":"","title":"Forced Damped Pendulum: A Comprehensive Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-differential-equation","text":"The motion of a forced damped pendulum can be described by the following second-order differential equation: \\[ \\frac{d^2\\theta}{dt^2} + 2\\beta \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega t) \\] where: - \\( \\theta \\) is the angular displacement, - \\( \\beta \\) is the damping coefficient, - \\( g \\) is the acceleration due to gravity, - \\( L \\) is the length of the pendulum, - \\( A \\) is the amplitude of the external driving force, - \\( \\omega \\) is the angular frequency of the driving force.","title":"Governing Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#approximate-solutions-for-small-angle-oscillations","text":"For small angles, we can use the approximation \\( \\sin(\\theta) \\approx \\theta \\) . This simplifies the equation to: \\[ \\frac{d^2\\theta}{dt^2} + 2\\beta \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega t) \\] This is a linear second-order ordinary differential equation. The general solution can be expressed as the sum of the homogeneous solution and a particular solution: Homogeneous Solution : The homogeneous part of the equation is given by: $$ \\frac{d^2\\theta_h}{dt^2} + 2\\beta \\frac{d\\theta_h}{dt} + \\frac{g}{L} \\theta_h = 0 $$ The characteristic equation is: $$ r^2 + 2\\beta r + \\frac{g}{L} = 0 $$ Solving this gives: $$ r = -\\beta \\pm \\sqrt{\\beta^2 - \\frac{g}{L}} $$ Depending on the discriminant, the solutions can be overdamped, critically damped, or underdamped. Particular Solution : For the particular solution, we can assume a solution of the form: $$ \\theta_p(t) = C \\cos(\\omega t - \\phi) $$ Substituting this into the differential equation allows us to solve for \\( C \\) and \\( \\phi \\) .","title":"Approximate Solutions for Small-Angle Oscillations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-conditions","text":"Resonance occurs when the driving frequency \\( \\omega \\) matches the natural frequency of the system, given by: $$ \\omega_0 = \\sqrt{\\frac{g}{L}} $$ At resonance, the amplitude of oscillation can become significantly larger, leading to increased energy in the system. This phenomenon is crucial in applications such as energy harvesting and mechanical resonance.","title":"Resonance Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#influence-of-parameters","text":"Damping Coefficient ( \\( \\beta \\) ) : Increasing \\( \\beta \\) leads to a decrease in oscillation amplitude and can transition the system from oscillatory to non-oscillatory behavior. Driving Amplitude ( \\( A \\) ) : Higher driving amplitudes can lead to larger oscillation amplitudes, especially near resonance. Driving Frequency ( \\( \\omega \\) ) : The system's response varies significantly with \\( \\omega \\) . At frequencies far from resonance, the system exhibits small oscillations, while at resonance, large oscillations can occur.","title":"Influence of Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"As parameters are varied, particularly the driving frequency and amplitude, the system can transition from regular oscillations to chaotic behavior. This transition can be analyzed using phase diagrams and Poincar\u00e9 sections, which illustrate the system's state over time.","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"The forced damped pendulum model has several real-world applications, including: Energy Harvesting Devices : Systems that convert mechanical energy from oscillations into electrical energy. Suspension Bridges : Understanding how external forces (like wind) affect the oscillations of the bridge. Oscillating Circuits : Analogous behavior in electrical circuits, such as driven RLC circuits, where resonance plays a critical role.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-simulation","text":"Below is a Python script that simulates the motion of a forced damped pendulum and visualizes its behavior under various conditions. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp def forced_damped_pendulum(t, y, beta, g, L, A, omega): theta, omega = y dydt = [omega, -2*beta*omega - (g/L) * np.sin(theta) + A * np.cos(omega * t)] return dydt # Parameters beta = 0.1 # Damping coefficient g = 9.81 # Acceleration due to gravity (m/s^2) L = 1.0 # Length of the pendulum (m) A = 1.0 # Amplitude of the driving force omega = 1.5 # Driving frequency (rad/s) # Initial conditions theta0 = 0.1 # Initial angle (radians) omega0 = 0.0 # Initial angular velocity (rad/s) y0 = [theta0, omega0] # Time span for the simulation t_span = (0, 50) # Time from 0 to 50 seconds t_eval = np.linspace(t_span[0], t_span[1], 1000) # Solve the differential equation solution = solve_ivp(forced_damped_pendulum, t_span, y0, args=(beta, g, L, A, omega), t_eval=t_eval) # Plotting the results plt.figure(figsize=(12, 6)) plt.plot(solution.t, solution.y[0], label='Angular Displacement (\u03b8)') plt.title('Forced Damped Pendulum Motion') plt.xlabel('Time (s)') plt.ylabel('Angular Displacement (radians)') plt.grid() plt.legend() plt.show()","title":"Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#graphical-representations","text":"The above code will generate a plot of the angular displacement of the pendulum over time. By varying the parameters \\( \\beta \\) , \\( A \\) , and \\( \\omega \\) , one can observe different behaviors, including resonance and chaotic motion.","title":"Graphical Representations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#phase-diagrams-and-poincare-sections","text":"To analyze transitions to chaos, one can create phase diagrams and Poincar\u00e9 sections. These visualizations help illustrate the system's dynamics and the nature of its oscillations.","title":"Phase Diagrams and Poincar\u00e9 Sections"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#limitations-and-extensions","text":"The model assumes small-angle approximations and linear damping. In reality, factors such as large angles, nonlinear damping, and non-periodic driving forces can significantly affect the system's behavior. Future work could involve: Introducing nonlinear damping to explore more complex dynamics. Investigating the effects of non-periodic driving forces. Analyzing the system's behavior under varying initial conditions and external perturbations. This comprehensive analysis of the forced damped pendulum not only elucidates fundamental physics principles but also demonstrates the model's versatility across various applications in engineering and natural systems. ```","title":"Limitations and Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp import matplotlib.animation as animation Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # Mass of the Earth (kg) Function to compute derivatives def orbit_eq(t, y): x, vx, y, vy = y r = np.sqrt(x 2 + y 2) if r == 0: return [vx, 0, vy, 0] # Prevent division by zero ax = -G * M * x / r 3 ay = -G * M * y / r 3 return [vx, ax, vy, ay] Function to compute orbital period and trajectory def compute_orbit(r0): v0 = np.sqrt(G * M / r0) # Circular orbit velocity y0 = [r0, 0, 0, v0] t_span = [0, 2 * np.pi * r0 / v0 * 2] # Ensure full orbit is captured sol = solve_ivp(orbit_eq, t_span, y0, t_eval=np.linspace(0, t_span[1], 1000)) # Find period using zero crossing of x-axis (returning to initial position) x_positions = sol.y[0] zero_crossings = np.where(np.diff(np.sign(x_positions - r0)))[0] if len(zero_crossings) > 1: T = sol.t[zero_crossings[1]] - sol.t[zero_crossings[0]] else: T = t_span[1] return T, sol.y[0], sol.y[2] Simulating for different radii radii = np.linspace(7e6, 4.2e7, 10) # Various altitudes periods = np.array([compute_orbit(r)[0] for r in radii]) Plotting T^2 vs. r^3 plt.figure(figsize=(8,6)) plt.plot(radii 3, periods 2, 'o-', label=' \\(T^2\\) vs. \\(r^3\\) ') plt.xlabel(' \\(r^3\\) (m^3)') plt.ylabel(' \\(T^2\\) (s^2)') plt.title(\"Verification of Kepler's Third Law\") plt.legend() plt.grid() plt.show() Create an animation of the orbit fig, ax = plt.subplots(figsize=(6,6)) ax.set_xlim(-radii[-1] 1.2, radii[-1] 1.2) ax.set_ylim(-radii[-1] 1.2, radii[-1] 1.2) ax.set_xlabel(\"X Position (m)\") ax.set_ylabel(\"Y Position (m)\") ax.set_title(\"Circular Orbit Simulation\") planet, = ax.plot([], [], 'bo', markersize=8, label=\"Orbiting Body\") trajectory, = ax.plot([], [], 'g-', linewidth=1, label=\"Orbit Path\") ax.legend() Get orbit data for animation r0 = radii[5] # Select a middle radius for visualization T, x_vals, y_vals = compute_orbit(r0) def init(): planet.set_data([], []) trajectory.set_data([], []) return planet, trajectory def update(frame): planet.set_data(x_vals[frame], y_vals[frame]) trajectory.set_data(x_vals[:frame], y_vals[:frame]) return planet, trajectory ani = animation.FuncAnimation(fig, update, frames=len(x_vals), init_func=init, blit=True, interval=10) plt.show() Ensure script runs properly in Visual Studio if name == \" main \": print(\"Simulation completed. Plot and animation displayed.\")","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants","text":"G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # Mass of the Earth (kg)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#function-to-compute-derivatives","text":"def orbit_eq(t, y): x, vx, y, vy = y r = np.sqrt(x 2 + y 2) if r == 0: return [vx, 0, vy, 0] # Prevent division by zero ax = -G * M * x / r 3 ay = -G * M * y / r 3 return [vx, ax, vy, ay]","title":"Function to compute derivatives"},{"location":"1%20Physics/2%20Gravity/Problem_1/#function-to-compute-orbital-period-and-trajectory","text":"def compute_orbit(r0): v0 = np.sqrt(G * M / r0) # Circular orbit velocity y0 = [r0, 0, 0, v0] t_span = [0, 2 * np.pi * r0 / v0 * 2] # Ensure full orbit is captured sol = solve_ivp(orbit_eq, t_span, y0, t_eval=np.linspace(0, t_span[1], 1000)) # Find period using zero crossing of x-axis (returning to initial position) x_positions = sol.y[0] zero_crossings = np.where(np.diff(np.sign(x_positions - r0)))[0] if len(zero_crossings) > 1: T = sol.t[zero_crossings[1]] - sol.t[zero_crossings[0]] else: T = t_span[1] return T, sol.y[0], sol.y[2]","title":"Function to compute orbital period and trajectory"},{"location":"1%20Physics/2%20Gravity/Problem_1/#simulating-for-different-radii","text":"radii = np.linspace(7e6, 4.2e7, 10) # Various altitudes periods = np.array([compute_orbit(r)[0] for r in radii])","title":"Simulating for different radii"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plotting-t2-vs-r3","text":"plt.figure(figsize=(8,6)) plt.plot(radii 3, periods 2, 'o-', label=' \\(T^2\\) vs. \\(r^3\\) ') plt.xlabel(' \\(r^3\\) (m^3)') plt.ylabel(' \\(T^2\\) (s^2)') plt.title(\"Verification of Kepler's Third Law\") plt.legend() plt.grid() plt.show()","title":"Plotting T^2 vs. r^3"},{"location":"1%20Physics/2%20Gravity/Problem_1/#create-an-animation-of-the-orbit","text":"fig, ax = plt.subplots(figsize=(6,6)) ax.set_xlim(-radii[-1] 1.2, radii[-1] 1.2) ax.set_ylim(-radii[-1] 1.2, radii[-1] 1.2) ax.set_xlabel(\"X Position (m)\") ax.set_ylabel(\"Y Position (m)\") ax.set_title(\"Circular Orbit Simulation\") planet, = ax.plot([], [], 'bo', markersize=8, label=\"Orbiting Body\") trajectory, = ax.plot([], [], 'g-', linewidth=1, label=\"Orbit Path\") ax.legend()","title":"Create an animation of the orbit"},{"location":"1%20Physics/2%20Gravity/Problem_1/#get-orbit-data-for-animation","text":"r0 = radii[5] # Select a middle radius for visualization T, x_vals, y_vals = compute_orbit(r0) def init(): planet.set_data([], []) trajectory.set_data([], []) return planet, trajectory def update(frame): planet.set_data(x_vals[frame], y_vals[frame]) trajectory.set_data(x_vals[:frame], y_vals[:frame]) return planet, trajectory ani = animation.FuncAnimation(fig, update, frames=len(x_vals), init_func=init, blit=True, interval=10) plt.show()","title":"Get orbit data for animation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#ensure-script-runs-properly-in-visual-studio","text":"if name == \" main \": print(\"Simulation completed. Plot and animation displayed.\")","title":"Ensure script runs properly in Visual Studio"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}