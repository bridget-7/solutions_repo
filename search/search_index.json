{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Projectile Motion Simulation 1. Introduction ### Purpose of the Study In this report we will be studying the motion of a projectile. The goal of this study is to develop a clear mathematical model that describes how different factors, like the angle of launch and initial velocity, affect the range and trajectory of the projectile. ## 2. Theoretical Foundation ### 2.1 Governing Equations of Motion There are basic equations that govern the motion of a projectile. These equations describe the horizontal and vertical displacements over time, considering an initial velocity and launch angle. # Derivation of Governing Equations of Motion ## 1. Horizontal Motion In projectile motion, the horizontal velocity remains constant (neglecting air resistance). The horizontal displacement is given by: \\[ x= v_0 \\cos(\\theta) t \\] where: - \\(v_0\\) is the initial velocity, -$\\thetas is the launch angle, - \\(t\\) is time.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#projectile-motion-simulation","text":"","title":"Projectile Motion Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-introduction","text":"### Purpose of the Study In this report we will be studying the motion of a projectile. The goal of this study is to develop a clear mathematical model that describes how different factors, like the angle of launch and initial velocity, affect the range and trajectory of the projectile. ## 2. Theoretical Foundation ### 2.1 Governing Equations of Motion There are basic equations that govern the motion of a projectile. These equations describe the horizontal and vertical displacements over time, considering an initial velocity and launch angle. # Derivation of Governing Equations of Motion ## 1. Horizontal Motion In projectile motion, the horizontal velocity remains constant (neglecting air resistance). The horizontal displacement is given by: \\[ x= v_0 \\cos(\\theta) t \\] where: - \\(v_0\\) is the initial velocity, -$\\thetas is the launch angle, - \\(t\\) is time.","title":"1. Introduction"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp Define the forced damped pendulum equations def pendulum(t, y, q, F, omega): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -q * omega_dot - np.sin(theta) + F * np.cos(omega * t) return [dtheta_dt, domega_dt] Parameters t_max = 100 # Max time q = 0.5 # Damping coefficient F = 1.2 # Driving force amplitude omega = 2/3 # Driving frequency Initial conditions y0 = [0.2, 0] # Initial angle and angular velocity Time points for evaluation t_eval = np.linspace(0, t_max, 5000) Solve the ODE using Runge-Kutta method sol = solve_ivp(pendulum, [0, t_max], y0, args=(q, F, omega), t_eval=t_eval, method='RK45') theta = sol.y[0] omega_dot = sol.y[1] Phase portrait plot plt.figure(figsize=(8, 6)) plt.plot(theta, omega_dot, '.', markersize=0.5, label='Phase Space') plt.xlabel(\"Theta (rad)\") plt.ylabel(\"Angular velocity (rad/s)\") plt.title(\"Phase Portrait of the Forced Damped Pendulum\") plt.legend() plt.grid() plt.show() Poincar\u00e9 section (sampling at integer multiples of driving period) T = (2 * np.pi) / omega # Driving period poincare_theta = [] poincare_omega = [] for i in range(len(t_eval)): if np.isclose(t_eval[i] % T, 0, atol=0.05): poincare_theta.append(theta[i]) poincare_omega.append(omega_dot[i]) Poincar\u00e9 section plot plt.figure(figsize=(8, 6)) plt.plot(poincare_theta, poincare_omega, 'ro', markersize=2, label='Poincar\u00e9 Points') plt.xlabel(\"Theta (rad)\") plt.ylabel(\"Angular velocity (rad/s)\") plt.title(\"Poincar\u00e9 Section of the Forced Damped Pendulum\") plt.legend() plt.grid() plt.show()","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#define-the-forced-damped-pendulum-equations","text":"def pendulum(t, y, q, F, omega): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -q * omega_dot - np.sin(theta) + F * np.cos(omega * t) return [dtheta_dt, domega_dt]","title":"Define the forced damped pendulum equations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters","text":"t_max = 100 # Max time q = 0.5 # Damping coefficient F = 1.2 # Driving force amplitude omega = 2/3 # Driving frequency","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#initial-conditions","text":"y0 = [0.2, 0] # Initial angle and angular velocity","title":"Initial conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#time-points-for-evaluation","text":"t_eval = np.linspace(0, t_max, 5000)","title":"Time points for evaluation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#solve-the-ode-using-runge-kutta-method","text":"sol = solve_ivp(pendulum, [0, t_max], y0, args=(q, F, omega), t_eval=t_eval, method='RK45') theta = sol.y[0] omega_dot = sol.y[1]","title":"Solve the ODE using Runge-Kutta method"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#phase-portrait-plot","text":"plt.figure(figsize=(8, 6)) plt.plot(theta, omega_dot, '.', markersize=0.5, label='Phase Space') plt.xlabel(\"Theta (rad)\") plt.ylabel(\"Angular velocity (rad/s)\") plt.title(\"Phase Portrait of the Forced Damped Pendulum\") plt.legend() plt.grid() plt.show()","title":"Phase portrait plot"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#poincare-section-sampling-at-integer-multiples-of-driving-period","text":"T = (2 * np.pi) / omega # Driving period poincare_theta = [] poincare_omega = [] for i in range(len(t_eval)): if np.isclose(t_eval[i] % T, 0, atol=0.05): poincare_theta.append(theta[i]) poincare_omega.append(omega_dot[i])","title":"Poincar\u00e9 section (sampling at integer multiples of driving period)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#poincare-section-plot","text":"plt.figure(figsize=(8, 6)) plt.plot(poincare_theta, poincare_omega, 'ro', markersize=2, label='Poincar\u00e9 Points') plt.xlabel(\"Theta (rad)\") plt.ylabel(\"Angular velocity (rad/s)\") plt.title(\"Poincar\u00e9 Section of the Forced Damped Pendulum\") plt.legend() plt.grid() plt.show()","title":"Poincar\u00e9 section plot"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp import matplotlib.animation as animation Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # Mass of the Earth (kg) Function to compute derivatives def orbit_eq(t, y): x, vx, y, vy = y r = np.sqrt(x 2 + y 2) ax = -G * M * x / r 3 ay = -G * M * y / r 3 return [vx, ax, vy, ay] Function to compute orbital period and trajectory def compute_orbit(r0): v0 = np.sqrt(G * M / r0) # Circular orbit velocity y0 = [r0, 0, 0, v0] t_span = [0, 2 * np.pi * r0 / v0 * 2] # Ensure full orbit is captured sol = solve_ivp(orbit_eq, t_span, y0, t_eval=np.linspace(0, t_span[1], 1000)) # Find period using zero crossing of x-axis (returning to initial position) x_positions = sol.y[0] zero_crossings = np.where(np.diff(np.sign(x_positions - r0)))[0] if len(zero_crossings) > 1: T = sol.t[zero_crossings[1]] - sol.t[zero_crossings[0]] else: T = t_span[1] return T, sol.y[0], sol.y[2] Simulating for different radii radii = np.linspace(7e6, 4.2e7, 10) # Various altitudes periods = np.array([compute_orbit(r)[0] for r in radii]) Plotting T^2 vs. r^3 plt.figure(figsize=(8,6)) plt.plot(radii 3, periods 2, 'o-', label=' \\(T^2\\) vs. \\(r^3\\) ') plt.xlabel(' \\(r^3\\) (m^3)') plt.ylabel(' \\(T^2\\) (s^2)') plt.title(\"Verification of Kepler's Third Law\") plt.legend() plt.grid() plt.show() Create an animation of the orbit fig, ax = plt.subplots(figsize=(6,6)) ax.set_xlim(-radii[-1], radii[-1]) ax.set_ylim(-radii[-1], radii[-1]) ax.set_xlabel(\"X Position (m)\") ax.set_ylabel(\"Y Position (m)\") ax.set_title(\"Circular Orbit Simulation\") planet, = ax.plot([], [], 'bo', markersize=8, label=\"Orbiting Body\") trajectory, = ax.plot([], [], 'g-', linewidth=1, label=\"Orbit Path\") ax.legend() Get orbit data for animation r0 = radii[5] # Select a middle radius for visualization T, x_vals, y_vals = compute_orbit(r0) def init(): planet.set_data([], []) trajectory.set_data([], []) return planet, trajectory def update(frame): planet.set_data(x_vals[frame], y_vals[frame]) trajectory.set_data(x_vals[:frame], y_vals[:frame]) return planet, trajectory ani = animation.FuncAnimation(fig, update, frames=len(x_vals), init_func=init, blit=True, interval=10) plt.show() Ensure script runs properly in Visual Studio if name == \" main \": print(\"Simulation completed. Plot and animation displayed.\")","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp import matplotlib.animation as animation","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants","text":"G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # Mass of the Earth (kg)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#function-to-compute-derivatives","text":"def orbit_eq(t, y): x, vx, y, vy = y r = np.sqrt(x 2 + y 2) ax = -G * M * x / r 3 ay = -G * M * y / r 3 return [vx, ax, vy, ay]","title":"Function to compute derivatives"},{"location":"1%20Physics/2%20Gravity/Problem_1/#function-to-compute-orbital-period-and-trajectory","text":"def compute_orbit(r0): v0 = np.sqrt(G * M / r0) # Circular orbit velocity y0 = [r0, 0, 0, v0] t_span = [0, 2 * np.pi * r0 / v0 * 2] # Ensure full orbit is captured sol = solve_ivp(orbit_eq, t_span, y0, t_eval=np.linspace(0, t_span[1], 1000)) # Find period using zero crossing of x-axis (returning to initial position) x_positions = sol.y[0] zero_crossings = np.where(np.diff(np.sign(x_positions - r0)))[0] if len(zero_crossings) > 1: T = sol.t[zero_crossings[1]] - sol.t[zero_crossings[0]] else: T = t_span[1] return T, sol.y[0], sol.y[2]","title":"Function to compute orbital period and trajectory"},{"location":"1%20Physics/2%20Gravity/Problem_1/#simulating-for-different-radii","text":"radii = np.linspace(7e6, 4.2e7, 10) # Various altitudes periods = np.array([compute_orbit(r)[0] for r in radii])","title":"Simulating for different radii"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plotting-t2-vs-r3","text":"plt.figure(figsize=(8,6)) plt.plot(radii 3, periods 2, 'o-', label=' \\(T^2\\) vs. \\(r^3\\) ') plt.xlabel(' \\(r^3\\) (m^3)') plt.ylabel(' \\(T^2\\) (s^2)') plt.title(\"Verification of Kepler's Third Law\") plt.legend() plt.grid() plt.show()","title":"Plotting T^2 vs. r^3"},{"location":"1%20Physics/2%20Gravity/Problem_1/#create-an-animation-of-the-orbit","text":"fig, ax = plt.subplots(figsize=(6,6)) ax.set_xlim(-radii[-1], radii[-1]) ax.set_ylim(-radii[-1], radii[-1]) ax.set_xlabel(\"X Position (m)\") ax.set_ylabel(\"Y Position (m)\") ax.set_title(\"Circular Orbit Simulation\") planet, = ax.plot([], [], 'bo', markersize=8, label=\"Orbiting Body\") trajectory, = ax.plot([], [], 'g-', linewidth=1, label=\"Orbit Path\") ax.legend()","title":"Create an animation of the orbit"},{"location":"1%20Physics/2%20Gravity/Problem_1/#get-orbit-data-for-animation","text":"r0 = radii[5] # Select a middle radius for visualization T, x_vals, y_vals = compute_orbit(r0) def init(): planet.set_data([], []) trajectory.set_data([], []) return planet, trajectory def update(frame): planet.set_data(x_vals[frame], y_vals[frame]) trajectory.set_data(x_vals[:frame], y_vals[:frame]) return planet, trajectory ani = animation.FuncAnimation(fig, update, frames=len(x_vals), init_func=init, blit=True, interval=10) plt.show()","title":"Get orbit data for animation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#ensure-script-runs-properly-in-visual-studio","text":"if name == \" main \": print(\"Simulation completed. Plot and animation displayed.\")","title":"Ensure script runs properly in Visual Studio"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}